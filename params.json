{"name":"Consolekit2","tagline":"ConsoleKit2 is a framework for defining and tracking users, login sessions, and seats.","body":"# ConsoleKit2 Documentation\r\n\r\n## Chapter 1. Introduction\r\n\r\n[![Coverity Scan Build Status](https://scan.coverity.com/projects/3199/badge.svg)](https://scan.coverity.com/projects/3199)\r\n\r\n[Help translate ConsoleKit2](https://www.transifex.com/projects/p/consolekit2/)\r\n\r\n[Report bugs and feature requests](https://github.com/ConsoleKit2/ConsoleKit2/issues)\r\n\r\n[Help develop ConsoleKit2](https://github.com/ConsoleKit2/ConsoleKit2)\r\n\r\nCommunication can be done through github comments/issues as well as on the IRC channel ConsoleKit2 on freenode.\r\nYou can easily join the channel by going to [Freenode Webchat](http://webchat.freenode.net/)\r\n\r\n## About\r\n\r\nConsoleKit2 is a framework for keeping track of the various users, sessions,\r\nand seats present on a system. It provides a mechanism for software to react\r\nto changes of any of these items or of any of the metadata associated with\r\nthem. ConsoleKit2 also allows fast switching between open sessions on the\r\ncomputer.\r\n\r\nConsoleKit2 is a fork of ConsoleKit since it is no longer maintained.\r\nInformation on ConsoleKit can be found at:\r\n[ConsoleKit](http://freedesktop.org/wiki/Software/ConsoleKit/) William Jon McCann was the\r\nprimary maintainer of ConsoleKit and most of this documentation was written by\r\nhim for ConsoleKit. It has been adapted for ConsoleKit2.\r\n\r\n## Defining the Problem\r\n\r\nA simple example is two users logging into a computer at the same time. They\r\nmay be sharing the same set of hardware for their graphical session, such as\r\nthe monitor, keyboard, and mouse. ConsoleKit2 will keep track of those\r\nresouces and which session is active and should have use of that hardware at a\r\ngiven time.\r\n\r\n## Relevant art\r\n\r\nLogind is a Linux daemon providing the similar functionality to ConsoleKit2.\r\n\r\n## Chapter 2. Terminology\r\n\r\n## Session\r\n\r\nA session is a collection of all processes that share knowledge of a secret.\r\nIn the typical (or ideal) case, these processes all originate from a single\r\ncommon ancestor.\r\n\r\nAs an implementation detail, for now, this secret should be stored in the\r\nprocess environment by the session leader under the name XDG_SESSION_COOKIE.\r\nWhen and if we are able to take advantage of a mechanism in the underlying\r\nsystem to store session registration information - we will. However, such a\r\nmechanism is not known at the present time.\r\n\r\nUsing an environment variable does have certain advantages. For one, it is\r\nquite easy for a process to opt-out of a Session by simply unsetting the\r\nXDG_SESSION_COOKIE variable.\r\n\r\nLimitations of using an environment variable implementation include not being\r\nable to strictly limit visibility of the secret to a particular process\r\nancestry. So, it is not possible to enforce session boundaries other than on a\r\nper-user basis. For example, we don't yet have a way to prevent a process from\r\nmoving between sessions owned by the same user.\r\n\r\n## Session leader\r\n\r\nThe session leader is the process that requests that a new session be opened.\r\nIt does this by connecting to the D-Bus system bus and using either\r\norg.freedesktop.ConsoleKit.Manager.OpenSession() or\r\norg.freedesktop.ConsoleKit.Manager.OpenSessionWithParameters(). The session\r\nthat it registers will remain open until the connection to the system bus is\r\nlost or it calls org.freedesktop.ConsoleKit.Manager.CloseSession().\r\n\r\nThe session leader is the only process for which CloseSession() will be\r\nallowed.\r\n\r\n## Seat\r\n\r\nA seat is a collection of sessions and a set of hardware (usually at least a\r\nkeyboard and mouse). Only one session may be active on a seat at a time.\r\n\r\nAt the present time, all Sessions that are considered \"local\" to a system will\r\nbe added the the first Seat and every other Session will be added to its own\r\nSeat.\r\n\r\nTrue, hardware, multi-seat capabilities will be added in a later release.\r\n\r\n## Chapter 3. Design\r\n\r\n## Session Lifecycle\r\n\r\nThe session leader process is responsible for asking ConsoleKit2 to open a new\r\nsession. In this respect, it is similar to the traditional POSIX user login\r\naccounting framework. In the typical case, the session leader is either an\r\nimmediate descendant of a login manager or the login manager itself. The\r\nleader makes a connection to the D-Bus system bus and asks ConsoleKit2 to open\r\na session. There are two methods available for opening a session:\r\norg.freedesktop.ConsoleKit.Manager.OpenSession() and\r\norg.freedesktop.ConsoleKit.Manager.OpenSessionWithParameters().\r\n\r\nIf the operation succeeds, a secret cookie will be returned to the session\r\nleader. The session leader should store this secret in the environment as\r\nXDG_SESSION_COOKIE so that it may be shared with its child processes.\r\n\r\nAt this point the session will be registered with ConsoleKit2 and a particular\r\nset of information about the session will be stored along with it.\r\n\r\nConsoleKit2 will decide, based on the information associated with the session,\r\nwhat Seat the session will be added to.\r\n\r\nIt will also be determined, based on the same set of information, whether the\r\nSession will control the hardware associated with the Seat. In other words,\r\nwhether the Session will be active for the Seat it is attached to. The exact\r\nmechanism for this determination depends on the type of Seat and the\r\ncapabilities of the host system.\r\n\r\nThe Session will remain open until the Session Leader disconnects from the\r\nD-Bus system bus or calls org.freedesktop.ConsoleKit.Manager.CloseSession().\r\nThe session will be removed from its Seat, and deregistered.\r\n\r\n## Expected Usage\r\n\r\nUse of this service will usually follow one of the following patterns:\r\n\r\n### Text Login Manager\r\n\r\nThis pattern operates as the Session Leader for a new Session. This pattern\r\nneeds:\r\n\r\n  1. To open a new Session.\r\n  2. To set properties for the Session.\r\n  3. To maintain a connection to the D-Bus system bus.\r\n  4. To close the Session at logout.\r\n\r\n### Graphical Login Manager\r\n\r\nIn addition to the requirements for the Text Graphical Login Manager, this\r\npattern is typically used to show information about currently open sessions.\r\nIt needs:\r\n\r\n  1. To determine which Seat it is running on.\r\n  2. To know if the current seat supports session switching.\r\n  3. A list of all sessions on the current Seat.\r\n  4. To know which session is active for the current Seat.\r\n  5. To know when the session active state changes.\r\n  6. To know when sessions are added or removed.\r\n  7. Access to the metadata for any open Session.\r\n\r\n### System Daemon\r\n\r\nThis is generally a daemon process running outside of a user session as a\r\nspecial user. This pattern needs:\r\n\r\n  1. To know if any user sessions are open.\r\n  2. To know if the system is currently being used.\r\n\r\n### Hardware Abstraction Layer\r\n\r\nThis is a special case of System Daemon that provides catalogs and control\r\nmechanisms for hardware devices. In addition to the requirements of System\r\nDaemon, this pattern needs:\r\n\r\n  1. To determine what hardware is associated with a Seat.\r\n  2. To determine what Session is active and inactive on a particular Seat.\r\n  3. To know when the session active state changes.\r\n  4. To determine what Session a process belongs to.\r\n\r\n### Fast User Switching Agent\r\n\r\nThis is related to the Graphical Login Manager and provides a shortcut to\r\nsimilar functionality. It is usually a tool available in the user session that\r\nallows one to quickly switch to another user session. This pattern needs:\r\n\r\n  1. To determine which session it is running in.\r\n  2. To determine which Seat it is running on.\r\n  3. To know if the current seat supports session switching.\r\n  4. A list of all sessions on the current Seat.\r\n  5. Which session is active for the current Seat.\r\n  6. To know when the session active state changes.\r\n  7. Access to the metadata for any open Session.\r\n  8. To know when sessions are added or removed.\r\n\r\n### Session Daemon (aka Policy Agent)\r\n\r\nThis is typically a daemon running in a user session that acts on policy only\r\nwhen the session is active. This pattern needs:\r\n\r\n  1. To determine which session it is running in.\r\n  2. To know when the session active state changes.\r\n\r\n### Session Application\r\n\r\nThis is typically an application running in a user session that may alter its\r\nbehavior when the session active state changes. This pattern needs:\r\n\r\n  1. To determine which session it is running in.\r\n  2. To know when the session active state changes.\r\n\r\n# Part II. Reference\r\n\r\n# D-Bus API Reference\r\n\r\n* * *\r\n\r\nConsoleKit2 provides a D-Bus API for programs to obtain information about the\r\nusers, sessions, and seats that are present on a system.\r\n\r\nPlease see the other sections of this manual for an introduction to these\r\nconcepts.\r\n\r\nThis API is not yet stable and is likely to change in the future.\r\n\r\n## Name\r\n\r\norg.freedesktop.ConsoleKit.Manager — Manager interface\r\n\r\n## Methods\r\n\r\n    Restart()\r\n    CanRestart(out'b'can_restart)\r\n    Stop()\r\n    CanStop(out'b'can_stop)\r\n    Reboot(in'b'policykit_interactivity)\r\n    CanReboot(out's'can_reboot)\r\n    PowerOff(in'b'policykit_interactivity)\r\n    CanPowerOff(out's'can_poweroff)\r\n    Suspend(in'b'policykit_interactivity)\r\n    CanSuspend(out's'can_suspend)\r\n    Hibernate(in'b'policykit_interactivity)\r\n    CanHibernate(out's'can_hibernate)\r\n    HybridSleep(in'b'policykit_interactivity)\r\n    CanHybridSleep(out's'can_hybridsleep)\r\n    Inhibit(in's'what,\r\n            in's'who,\r\n            in's'why,\r\n            out'h'fd)\r\n    OpenSession(out's'cookie)\r\n    OpenSessionWithParameters(in'a(sv)'parameters,\r\n                              out's'cookie)\r\n    CloseSession(in's'cookie,\r\n                 out'b'result)\r\n    GetSeats(out'ao'seats)\r\n    GetSessions(out'ao'sessions)\r\n    GetSessionForCookie(in's'cookie,\r\n                        out'o'ssid)\r\n    GetSessionForUnixProcess(in'u'pid,\r\n                             out'o'ssid)\r\n    GetCurrentSession(out'o'ssid)\r\n    GetSessionsForUnixUser(in'u'uid,\r\n                           out'ao'sessions)\r\n    GetSessionsForUser(in'u'uid,\r\n                       out'ao'sessions)\r\n    GetSystemIdleHint(out'b'idle_hint)\r\n    GetSystemIdleSinceHint(out's'iso8601_datetime)\r\n    \r\n\r\n## Signals\r\n\r\n    SeatAdded('o'sid)\r\n    SeatRemoved('o'sid)\r\n    SystemIdleHintChanged('b'hint)\r\n    \r\n\r\n## Implemented Interfaces\r\n\r\nObjects implementing org.freedesktop.ConsoleKit.Manager also implements\r\norg.freedesktop.DBus.Introspectable, org.freedesktop.DBus.Properties\r\n\r\n## Description\r\n\r\n## Details\r\n\r\n### Restart ()\r\n\r\n    Restart ()\r\n\r\nThis method initiates a request to restart (ie. reboot) the computer system.\r\n\r\n### CanRestart ()\r\n\r\n    CanRestart (out'b'can_restart)\r\n\r\n_`can_restart`_:\r\n\r\n### Stop ()\r\n\r\n    Stop ()\r\n\r\nThis method initiates a request to stop (ie. shutdown) the computer system.\r\n\r\n### CanStop ()\r\n\r\n    CanStop (out'b'can_stop)\r\n\r\n_`can_stop`_:\r\n\r\n### Reboot ()\r\n\r\n    Reboot (in'b'policykit_interactivity)\r\n\r\nThis method emulates the logind implementation. This method initiates a\r\nrequest to reboot the computer system.\r\n\r\nSince 0.9.2\r\n\r\n_`policykit_interactivity`_:\r\n\r\npolicykit_interactivity determines whether PolicyKit (if enabled) should interactively ask the user for authentication credentials if it needs to.\r\n\r\n### CanReboot ()\r\n\r\n    CanReboot (out's'can_reboot)\r\n\r\nThis method emulates the logind implementation.\r\n\r\nReturns whether the system supports rebooting and whether the calling user is\r\neligible to reboot the system.\r\n\r\nReturns one of \"na\", \"yes\", \"no\" or \"challenge\".\r\n\r\nIf \"na\" is returned rebooting is not available because of hardware support.\r\n\r\nIf \"yes\" is returned rebooting is supported and the user may suspend without\r\nfurther authentication.\r\n\r\nIf \"no\" is returned rebooting is available but the user is not allowed to\r\nreboot.\r\n\r\nIf \"challenge\" is returned rebooting is available, but only after\r\nauthorization.\r\n\r\nSince 0.9.2\r\n\r\n_`can_reboot`_:\r\n\r\n### PowerOff ()\r\n\r\n    PowerOff (in'b'policykit_interactivity)\r\n\r\nThis method initiates a request to shutdown the computer system.\r\n\r\nSince 0.9.2\r\n\r\n_`policykit_interactivity`_:\r\n\r\npolicykit_interactivity determines whether PolicyKit (if enabled) should interactively ask the user for authentication credentials if it needs to.\r\n\r\n### CanPowerOff ()\r\n\r\n    CanPowerOff (out's'can_poweroff)\r\n\r\nThis method emulates the logind implementation.\r\n\r\nReturns whether the system supports shutdown and whether the calling user is\r\neligible to shutdown the system.\r\n\r\nReturns one of \"na\", \"yes\", \"no\" or \"challenge\".\r\n\r\nIf \"na\" is returned shutdown is not available because of hardware support.\r\n\r\nIf \"yes\" is returned shutdown is supported and the user may hibernate without\r\nfurther authentication.\r\n\r\nIf \"no\" is returned shutdown is available but the user is not allowed to\r\nshutdown.\r\n\r\nIf \"challenge\" is returned shutdown is available, but only after\r\nauthorization.\r\n\r\nSince 0.9.2\r\n\r\n_`can_poweroff`_:\r\n\r\n### Suspend ()\r\n\r\n    Suspend (in'b'policykit_interactivity)\r\n\r\nThis method initiates a request to suspend the computer system.\r\n\r\nSince 0.9.2\r\n\r\n_`policykit_interactivity`_:\r\n\r\npolicykit_interactivity determines whether PolicyKit (if enabled) should interactively ask the user for authentication credentials if it needs to.\r\n\r\n### CanSuspend ()\r\n\r\n    CanSuspend (out's'can_suspend)\r\n\r\nThis method emulates the logind implementation.\r\n\r\nReturns whether the system supports suspending and whether the calling user is\r\neligible to hibernate the system.\r\n\r\nReturns one of \"na\", \"yes\", \"no\" or \"challenge\".\r\n\r\nIf \"na\" is returned suspending is not available because of hardware support.\r\n\r\nIf \"yes\" is returned suspending is supported and the user may suspend without\r\nfurther authentication.\r\n\r\nIf \"no\" is returned suspending is available but the user is not allowed to\r\nsuspend.\r\n\r\nIf \"challenge\" is returned suspending is available, but only after\r\nauthorization.\r\n\r\nSince 0.9.1\r\n\r\n_`can_suspend`_:\r\n\r\n### Hibernate ()\r\n\r\n    Hibernate (in'b'policykit_interactivity)\r\n\r\nThis method initiates a request to hibernate the computer system.\r\n\r\nSince 0.9.2\r\n\r\n_`policykit_interactivity`_:\r\n\r\npolicykit_interactivity determines whether PolicyKit (if enabled) should interactively ask the user for authentication credentials if it needs to.\r\n\r\n### CanHibernate ()\r\n\r\n    CanHibernate (out's'can_hibernate)\r\n\r\nThis method emulates the logind implementation.\r\n\r\nReturns whether the system supports hibernation and whether the calling user\r\nis eligible to hibernate the system.\r\n\r\nReturns one of \"na\", \"yes\", \"no\" or \"challenge\".\r\n\r\nIf \"na\" is returned hibernation is not available because of hardware support.\r\n\r\nIf \"yes\" is returned hibernation is supported and the user may hibernate\r\nwithout further authentication.\r\n\r\nIf \"no\" is returned hibernation is available but the user is not allowed to\r\nhibernate.\r\n\r\nIf \"challenge\" is returned hibernation is available, but only after\r\nauthorization.\r\n\r\nSince 0.9.1\r\n\r\n_`can_hibernate`_:\r\n\r\n### HybridSleep ()\r\n\r\n    HybridSleep (in'b'policykit_interactivity)\r\n\r\nThis method initiates a request to hybrid sleep (suspend + hibernate) the\r\ncomputer system.\r\n\r\nSince 0.9.2\r\n\r\n_`policykit_interactivity`_:\r\n\r\npolicykit_interactivity determines whether PolicyKit (if enabled) should interactively ask the user for authentication credentials if it needs to.\r\n\r\n### CanHybridSleep ()\r\n\r\n    CanHybridSleep (out's'can_hybridsleep)\r\n\r\nThis method emulates the logind implementation.\r\n\r\nReturns whether the system supports hybrid sleep (suspend + hibernate) and\r\nwhether the calling user is eligible to hybrid sleep the system.\r\n\r\nReturns one of \"na\", \"yes\", \"no\" or \"challenge\".\r\n\r\nIf \"na\" is returned hybrid sleeping is not available because of hardware\r\nsupport.\r\n\r\nIf \"yes\" is returned hybrid sleeping is supported and the user may hybrid\r\nsleep without further authentication.\r\n\r\nIf \"no\" is returned hybrid sleeping is available but the user is not allowed\r\nto hybrid sleep.\r\n\r\nIf \"challenge\" is returned hybrid sleeping is available, but only after\r\nauthorization.\r\n\r\nSince 0.9.1\r\n\r\n_`can_hybridsleep`_:\r\n\r\n### Inhibit ()\r\n\r\n    Inhibit (in's'what,\r\n             in's'who,\r\n             in's'why,\r\n             out'h'fd)\r\n\r\nInhibit locks are named pipes used by ConsoleKit2 to prevent the system from\r\nperforming actions such as suspending, restarting, or going idle. There are\r\nvarious reasons and application would like to prevent one or more of these\r\nfunctions such as a movie player preventing the screen saving from activating\r\nor a package manager ensuring an application installs before allowing the\r\ncomputer to shutdown.\r\n\r\nNote: Each application can have only one lock open at any given time. Multiple\r\napplications can hold locks to the same thing, for example a media player\r\napplication and a cd burning application can both prevent the system from\r\nbeing marked idle.\r\n\r\nSee this simple example:\r\n\r\n        DBusConnection *bus_connection;\r\n        DBusMessage *message = NULL, *reply = NULL;\r\n        DBusError error;\r\n        gint fd = -1;\r\n        const char *what = \"shutdown:sleep\";\r\n        const char *who = \"Xfburn\";\r\n        const char *why = \"Burning a DVD, interrupting now will ruin the DVD.\";\r\n    \r\n        message = dbus_message_new_method_call (\"org.freedesktop.ConsoleKit\",\r\n                                                \"/org/freedesktop/ConsoleKit/Manager\",\r\n                                                \"org.freedesktop.ConsoleKit.Manager\",\r\n                                                \"Inhibit\");\r\n    \r\n        if (!message)\r\n        {\r\n            g_warning (\"Unable to call Inhibit()\");\r\n            return fd;\r\n        }\r\n    \r\n        if (!dbus_message_append_args (message,\r\n                                       DBUS_TYPE_STRING, &what,\r\n                                       DBUS_TYPE_STRING, &who,\r\n                                       DBUS_TYPE_STRING, &why,\r\n                                       DBUS_TYPE_INVALID))\r\n        {\r\n            g_warning (\"Unable to call Inhibit()\");\r\n            dbus_message_unref (message);\r\n            return fd;\r\n        }\r\n    \r\n        reply = dbus_connection_send_with_reply_and_block (bus_connection, message, -1, &error);\r\n        if (!reply)\r\n        {\r\n            g_warning (\"Unable to inhibit: %s\", error.message);\r\n            dbus_message_unref (message);\r\n            return fd;\r\n        }\r\n    \r\n        if (!dbus_message_get_args (reply, &error,\r\n                                    DBUS_TYPE_UNIX_FD, &fd,\r\n                                    DBUS_TYPE_INVALID))\r\n        {\r\n            g_warning (\"Inhibit() reply parsing failed: %s\", error.message);\r\n        }\r\n    \r\n        dbus_message_unref (message);\r\n        dbus_message_unref (reply);\r\n        dbus_error_free (&error);\r\n        return fd;\r\n\r\n\r\n_`what`_:\r\nWhat is a colon-separated list of lock types. The list of lock types are: shutdown, sleep, idle, handle-power-key, handle-suspend-key, handle-hibernate-key. Example: \"shutdown:idle\"\r\n_`who`_:\r\nWho is a human-readable, descriptive string of who is taking the lock. Example: \"Xfburn\"\r\n_`why`_:\r\nWhy is a human-readable, descriptive string of why the program is taking the lock. Example: \"Burning a DVD, interrupting now will ruin the DVD.\"\r\n_`fd`_:\r\nReturns a file descriptor that encapsulates the lock, or -1 on failure. As soon as the file descriptor is closed (and all its duplicates) the lock is automatically released. If the client dies while the lock is taken it is automatically closed and the lock is released.\r\n\r\n### OpenSession ()\r\n\r\n    OpenSession (out's'cookie)\r\n\r\nThis method requests that a new Session be created for the calling process.\r\nThe properties of this new Session are set automatically from information\r\ncollected about the calling process.\r\n\r\nThis new session exists until the calling process disconnects from the system\r\nbus or calls `CloseSession()`.\r\n\r\nIt is the responsibility of the calling process to set the environment\r\nvariable XDG_SESSION_COOKIE to the value of the returned cookie. This cookie\r\nshould only be made available to child processes of the caller so that they\r\nmay be identified as members of this session.\r\n\r\nSee this simple example:\r\n\r\n    DBusError       error;\r\n    DBusMessage    *message;\r\n    DBusMessage    *reply;\r\n    \r\n    message = dbus_message_new_method_call (\"org.freedesktop.ConsoleKit\",\r\n                                            \"/org/freedesktop/ConsoleKit/Manager\",\r\n                                            \"org.freedesktop.ConsoleKit.Manager\",\r\n                                            \"OpenSession\");\r\n    if (message == NULL) {\r\n        goto out;\r\n    }\r\n    \r\n        dbus_error_init (&error);\r\n        reply = dbus_connection_send_with_reply_and_block (connector->connection,\r\n                                                           message,\r\n                                                           -1,\r\n                                                           &error);\r\n        if (reply == NULL) {\r\n        goto out;\r\n        }\r\n    \r\n        dbus_error_init (&error);\r\n        if (! dbus_message_get_args (reply,\r\n                                     &error,\r\n                                     DBUS_TYPE_STRING, &cookie,\r\n                                     DBUS_TYPE_INVALID)) {\r\n        goto out;\r\n        }\r\n\r\n_`cookie`_:\r\n\r\n    The secret cookie that is used to identify the new session\r\n\r\nSee also: `OpenSessionWithParameters()`\r\n\r\n### OpenSessionWithParameters ()\r\n\r\n    OpenSessionWithParameters (in'a(sv)'parameters,\r\n                               out's'cookie)\r\n\r\nThis method requests that a new Session be created for the calling process.\r\nThe properties of this new Session are from the parameters provided.\r\n\r\nThis new session exists until the calling process disconnects from the system\r\nbus or calls `CloseSession()`.\r\n\r\nIt is the responsibility of the calling process to set the environment\r\nvariable XDG_SESSION_COOKIE to the value of the returned cookie. This cookie\r\nshould only be made available to child processes of the caller so that they\r\nmay be identified as members of this session.\r\n\r\nSee the Session properties for a list of valid parameters.\r\n\r\n_`parameters`_:\r\n\r\n    An array of sets of property names and values\r\n_`cookie`_:\r\n\r\n    The secret cookie that is used to identify the new session\r\n\r\n### Permissions\r\n\r\nThis method is restricted to privileged users by D-Bus policy.\r\n\r\nSee also: org.freedesktop.ConsoleKit.Session\r\n\r\n### CloseSession ()\r\n\r\n    CloseSession (in's'cookie,\r\n                  out'b'result)\r\n\r\nThis method is used to close the session identified by the supplied cookie.\r\n\r\nThe session can only be closed by the same process that opened the session.\r\n\r\n_`cookie`_:\r\n\r\n    The secret cookie that is used to identify the session\r\n_`result`_:\r\n\r\n    Whether the session was successfully closed\r\n\r\n### GetSeats ()\r\n\r\n    GetSeats (out'ao'seats)\r\n\r\nThis gets a list of all the Seats that are currently present on the system.\r\n\r\nEach Seat ID is an D-Bus object path for the object that implements the Seat\r\ninterface.\r\n\r\n_`seats`_:\r\n\r\n    an array of Seat IDs\r\n\r\nSee also: org.freedesktop.ConsoleKit.Seat\r\n\r\n### GetSessions ()\r\n\r\n    GetSessions (out'ao'sessions)\r\n\r\nThis gets a list of all the Sessions that are currently present on the system.\r\n\r\nEach Session ID is an D-Bus object path for the object that implements the\r\nSession interface.\r\n\r\n_`sessions`_:\r\n\r\n    an array of Session IDs\r\n\r\nSee also: org.freedesktop.ConsoleKit.Session\r\n\r\n### GetSessionForCookie ()\r\n\r\n    GetSessionForCookie (in's'cookie,\r\n                         out'o'ssid)\r\n\r\nReturns the session ID that is associated with the specified cookie.\r\n\r\n_`cookie`_:\r\n\r\n    The secret cookie that is used to identify the session\r\n_`ssid`_:\r\n\r\n    The object identifier for the current session\r\n\r\n### GetSessionForUnixProcess ()\r\n\r\n    GetSessionForUnixProcess (in'u'pid,\r\n                              out'o'ssid)\r\n\r\nAttempts to determine the session ID for the specified POSIX process ID (pid).\r\n\r\n_`pid`_:\r\n\r\n    The POSIX process ID\r\n_`ssid`_:\r\n\r\n    The object identifier for the current session\r\n\r\n### GetCurrentSession ()\r\n\r\n    GetCurrentSession (out'o'ssid)\r\n\r\nAttempts to determine the session ID that the caller belongs to.\r\n\r\nSee this example of using dbus-send:\r\n\r\n      dbus-send --system --dest=org.freedesktop.ConsoleKit \\\r\n      --type=method_call --print-reply --reply-timeout=2000 \\\r\n      /org/freedesktop/ConsoleKit/Manager \\\r\n      org.freedesktop.ConsoleKit.Manager.GetCurrentSession\r\n              \r\n\r\n_`ssid`_:\r\n\r\n    The object identifier for the current session\r\n\r\n### GetSessionsForUnixUser ()\r\n\r\n    GetSessionsForUnixUser (in'u'uid,\r\n                            out'ao'sessions)\r\n\r\nThis gets a list of all the Sessions that are currently open for the specified\r\nuser.\r\n\r\nEach Session ID is an D-Bus object path for the object that implements the\r\nSession interface.\r\n\r\n_`uid`_:\r\n\r\n    POSIX User identification\r\n_`sessions`_:\r\n\r\n    an array of Session IDs\r\n\r\n### GetSessionsForUser ()\r\n\r\n    GetSessionsForUser (in'u'uid,\r\n                        out'ao'sessions)\r\n\r\nThis gets a list of all the Sessions that are currently open for the specified\r\nuser.\r\n\r\nEach Session ID is an D-Bus object path for the object that implements the\r\nSession interface.\r\n\r\n_`uid`_:\r\n\r\n    User identification\r\n_`sessions`_:\r\n\r\n    an array of Session IDs\r\n\r\n### Warning\r\n\r\n`GetSessionsForUser` is deprecated since version 0.1.3 and should not be used\r\nin newly-written code. Use `GetSessionsForUnixUser` instead.\r\n\r\n### GetSystemIdleHint ()\r\n\r\n    GetSystemIdleHint (out'b'idle_hint)\r\n\r\nReturns TRUE if the `idle-hint` property of every open session is TRUE or if\r\nthere are no open sessions.\r\n\r\n_`idle_hint`_:\r\n\r\n    The value of the system-idle-hint\r\n\r\n### GetSystemIdleSinceHint ()\r\n\r\n    GetSystemIdleSinceHint (out's'iso8601_datetime)\r\n\r\nReturns an ISO 8601 date-time string that corresponds to the time of the last\r\nchange of the system-idle-hint.\r\n\r\n_`iso8601_datetime`_:\r\n\r\n    An ISO 8601 format date-type string\r\n\r\n## Signal Details\r\n\r\n### The SeatAdded signal\r\n\r\n    SeatAdded ('o'sid)\r\n\r\nEmitted when a Seat has been added to the system.\r\n\r\n_`sid`_:\r\n\r\n    The Seat ID for the added seat\r\n\r\n### The SeatRemoved signal\r\n\r\n    SeatRemoved ('o'sid)\r\n\r\nEmitted when a Seat has been removed from the system.\r\n\r\n_`sid`_:\r\n\r\n    The Seat ID for the removed seat\r\n\r\n### The SystemIdleHintChanged signal\r\n\r\n    SystemIdleHintChanged ('b'hint)\r\n\r\nEmitted when the value of the system-idle-hint has changed.\r\n\r\n_`hint`_:\r\n\r\n    The value of the system-idle-hint\r\n\r\n* * *\r\n\r\n## Name\r\n\r\norg.freedesktop.ConsoleKit.Seat — Seat interface\r\n\r\n## Methods\r\n\r\n    GetId(out'o'sid)\r\n    GetSessions(out'ao'sessions)\r\n    GetDevices(out'a(ss)'devices)\r\n    GetActiveSession(out'o'ssid)\r\n    CanActivateSessions(out'b'can_activate)\r\n    ActivateSession(in'o'ssid)\r\n    \r\n\r\n## Signals\r\n\r\n    ActiveSessionChanged('o'ssid)\r\n    SessionAdded('o'ssid)\r\n    SessionRemoved('o'ssid)\r\n    DeviceAdded('(ss)'device)\r\n    DeviceRemoved('(ss)'device)\r\n    \r\n\r\n## Implemented Interfaces\r\n\r\nObjects implementing org.freedesktop.ConsoleKit.Seat also implements\r\norg.freedesktop.DBus.Introspectable, org.freedesktop.DBus.Properties\r\n\r\n## Description\r\n\r\nA seat is a collection of sessions and a set of hardware (usually at least a\r\nkeyboard and mouse). Only one session may be active on a seat at a time.\r\n\r\n## Details\r\n\r\n### GetId ()\r\n\r\n    GetId (out'o'sid)\r\n\r\nReturns the ID for Seat.\r\n\r\n_`sid`_:\r\n\r\n    Seat ID\r\n\r\n### GetSessions ()\r\n\r\n    GetSessions (out'ao'sessions)\r\n\r\nThis gets a list of all the Sessions that are currently attached to this seat.\r\n\r\nEach Session ID is an D-Bus object path for the object that implements the\r\nSession interface.\r\n\r\n_`sessions`_:\r\n\r\n    an array of Session IDs\r\n\r\n### GetDevices ()\r\n\r\n    GetDevices (out'a(ss)'devices)\r\n\r\nThis gets a list of all the devices that are currently associated with this\r\nseat.\r\n\r\nEach device is an D-Bus structure that represents the device type and the\r\ndevice id.\r\n\r\n_`devices`_:\r\n\r\n    an array of devices\r\n\r\n### GetActiveSession ()\r\n\r\n    GetActiveSession (out'o'ssid)\r\n\r\nGets the Session ID that is currently active on this Seat.\r\n\r\nReturns NULL if there is no active session.\r\n\r\n_`ssid`_:\r\n\r\n    Session ID\r\n\r\n### CanActivateSessions ()\r\n\r\n    CanActivateSessions (out'b'can_activate)\r\n\r\nUsed to determine whether the seat supports session activation.\r\n\r\n_`can_activate`_:\r\n\r\n    TRUE if seat supports session activation\r\n\r\n### ActivateSession ()\r\n\r\n    ActivateSession (in'o'ssid)\r\n\r\nAttempt to activate the specified session. In most cases, if successful, this\r\nwill cause the session to become visible and take control of the hardware that\r\nis associated with this seat.\r\n\r\n_`ssid`_:\r\n\r\n    Session ID\r\n\r\nSee also: `Activate()`\r\n\r\n## Signal Details\r\n\r\n### The ActiveSessionChanged signal\r\n\r\n    ActiveSessionChanged ('o'ssid)\r\n\r\nEmitted when the active session has changed.\r\n\r\n_`ssid`_:\r\n\r\n    Session ID\r\n\r\n### The SessionAdded signal\r\n\r\n    SessionAdded ('o'ssid)\r\n\r\nEmitted when a session has been added to the seat.\r\n\r\n_`ssid`_:\r\n\r\n    Session ID\r\n\r\n### The SessionRemoved signal\r\n\r\n    SessionRemoved ('o'ssid)\r\n\r\nEmitted when a session has been removed from the seat.\r\n\r\n_`ssid`_:\r\n\r\n    Session ID\r\n\r\n### The DeviceAdded signal\r\n\r\n    DeviceAdded ('(ss)'device)\r\n\r\nEmitted when a device has been associated with the seat.\r\n\r\n_`device`_:\r\n\r\n    Device structure\r\n\r\n### The DeviceRemoved signal\r\n\r\n    DeviceRemoved ('(ss)'device)\r\n\r\nEmitted when a device has been dissociated from the seat.\r\n\r\n_`device`_:\r\n\r\n    Device structure\r\n\r\n* * *\r\n\r\n## Name\r\n\r\norg.freedesktop.ConsoleKit.Session — Session interface\r\n\r\n## Methods\r\n\r\n    GetId(out'o'ssid)\r\n    GetSeatId(out'o'sid)\r\n    GetSessionType(out's'type)\r\n    GetUser(out'u'uid)\r\n    GetUnixUser(out'u'uid)\r\n    GetX11Display(out's'display)\r\n    GetX11DisplayDevice(out's'x11_display_device)\r\n    GetDisplayDevice(out's'display_device)\r\n    GetRemoteHostName(out's'remote_host_name)\r\n    GetLoginSessionId(out's'login_session_id)\r\n    IsActive(out'b'active)\r\n    IsLocal(out'b'local)\r\n    GetCreationTime(out's'iso8601_datetime)\r\n    Activate()\r\n    Lock()\r\n    Unlock()\r\n    GetIdleHint(out'b'idle_hint)\r\n    GetIdleSinceHint(out's'iso8601_datetime)\r\n    SetIdleHint(in'b'idle_hint)\r\n    \r\n\r\n## Signals\r\n\r\n    ActiveChanged('b'is_active)\r\n    IdleHintChanged('b'hint)\r\n    Lock()\r\n    Unlock()\r\n    \r\n\r\n## Implemented Interfaces\r\n\r\nObjects implementing org.freedesktop.ConsoleKit.Session also implements\r\norg.freedesktop.DBus.Introspectable, org.freedesktop.DBus.Properties\r\n\r\n## Properties\r\n\r\n    'unix-user'readwrite'u'\r\n    'user'readwrite'u'\r\n    'session-type'readwrite's'\r\n    'remote-host-name'readwrite's'\r\n    'display-device'readwrite's'\r\n    'x11-display'readwrite's'\r\n    'x11-display-device'readwrite's'\r\n    'active'readwrite'b'\r\n    'is-local'readwrite'b'\r\n    'idle-hint'readwrite'b'\r\n    \r\n\r\n## Description\r\n\r\nSession objects represent and store information related to a user session.\r\n\r\nThe properties associated with the Session specifically refer to the\r\nproperties of the \"session leader\".\r\n\r\n## Details\r\n\r\n### GetId ()\r\n\r\n    GetId (out'o'ssid)\r\n\r\nReturns the ID for Session.\r\n\r\n_`ssid`_:\r\n\r\n    Session ID\r\n\r\n### GetSeatId ()\r\n\r\n    GetSeatId (out'o'sid)\r\n\r\nReturns the ID for the Seat the Session is attached to.\r\n\r\n_`sid`_:\r\n\r\n    Seat ID\r\n\r\nSee also: org.freedesktop.ConsoleKit.Seat\r\n\r\n### GetSessionType ()\r\n\r\n    GetSessionType (out's'type)\r\n\r\nReturns the type of the session.\r\n\r\nWarning: we haven't yet defined the allowed values for this property. It is\r\nprobably best to avoid this until we do.\r\n\r\n_`type`_:\r\n\r\n    Session type\r\n\r\nSee also: `session-type`\r\n\r\n### GetUser ()\r\n\r\n    GetUser (out'u'uid)\r\n\r\nReturns the user that the session belongs to.\r\n\r\n_`uid`_:\r\n\r\n    User ID\r\n\r\n### Warning\r\n\r\n`GetUser` is deprecated since version 0.1.3 and should not be used in newly-\r\nwritten code. Use `GetUnixUser` instead.\r\n\r\nSee also: `user`\r\n\r\n### GetUnixUser ()\r\n\r\n    GetUnixUser (out'u'uid)\r\n\r\nReturns the POSIX user ID that the session belongs to.\r\n\r\n_`uid`_:\r\n\r\n    POSIX User ID\r\n\r\nSee also: `unix-user`\r\n\r\n### GetX11Display ()\r\n\r\n    GetX11Display (out's'display)\r\n\r\nReturns the value of the X11 DISPLAY for this session if one is present.\r\n\r\n_`display`_:\r\n\r\n    The value of the X11 display\r\n\r\nSee also: `x11-display`\r\n\r\n### GetX11DisplayDevice ()\r\n\r\n    GetX11DisplayDevice (out's'x11_display_device)\r\n\r\nReturns the value of the display device (aka TTY) that the X11 display for the\r\nsession is connected to. If there is no x11-display set then this value is\r\nundefined.\r\n\r\n_`x11_display_device`_:\r\n\r\n    The value of the X11 display device\r\n\r\nSee also: `x11-display-device`\r\n\r\n### GetDisplayDevice ()\r\n\r\n    GetDisplayDevice (out's'display_device)\r\n\r\nReturns the value of the display device (aka TTY) that the session is\r\nconnected to.\r\n\r\n_`display_device`_:\r\n\r\n    The value of the display device\r\n\r\nSee also: `display-device`\r\n\r\n### GetRemoteHostName ()\r\n\r\n    GetRemoteHostName (out's'remote_host_name)\r\n\r\nReturns the value of the remote host name for the session.\r\n\r\n_`remote_host_name`_:\r\n\r\n    The remote host name\r\n\r\nSee also: `remote-host-name`\r\n\r\n### GetLoginSessionId ()\r\n\r\n    GetLoginSessionId (out's'login_session_id)\r\n\r\nReturns the value of the login session ID that the underlying system uses to\r\nenforce session boundaries. If there is no login session ID set then this\r\nvalue is an empty string.\r\n\r\n_`login_session_id`_:\r\n\r\n    The value of the native system login session ID\r\n\r\n### IsActive ()\r\n\r\n    IsActive (out'b'active)\r\n\r\nReturns whether the session is active on the Seat that it is attached to.\r\n\r\nIf the session is not attached to a seat this value is undefined.\r\n\r\n_`active`_:\r\n\r\n    TRUE if the session is active, otherwise FALSE\r\n\r\nSee also: `active`\r\n\r\n### IsLocal ()\r\n\r\n    IsLocal (out'b'local)\r\n\r\nReturns whether the session is local\r\n\r\nFIXME: we need to come up with a concrete definition for this value. It was\r\noriginally used as a way to identify XDMCP sessions that originate from a\r\nremote system.\r\n\r\n_`local`_:\r\n\r\n    TRUE if the session is local, otherwise FALSE\r\n\r\nSee also: `is-local`\r\n\r\n### GetCreationTime ()\r\n\r\n    GetCreationTime (out's'iso8601_datetime)\r\n\r\nReturns an ISO 8601 date-time string that corresponds to the time that the\r\nsession was opened.\r\n\r\n_`iso8601_datetime`_:\r\n\r\n    An ISO 8601 format date-type string\r\n\r\n### Activate ()\r\n\r\n    Activate ()\r\n\r\nAttempt to activate the this session. In most cases, if successful, this will\r\ncause the session to become visible and become active on the seat that it is\r\nattached to.\r\n\r\nSee also: `Seat.ActivateSession()`\r\n\r\n### Lock ()\r\n\r\n    Lock ()\r\n\r\nThis will cause a `Lock` signal to be emitted for this session.\r\n\r\n### Permissions\r\n\r\nThis method is restricted to privileged users by D-Bus policy.\r\n\r\nSee also: `Lock signal`\r\n\r\n### Unlock ()\r\n\r\n    Unlock ()\r\n\r\nThis will cause an `Unlock` signal to be emitted for this session.\r\n\r\nThis can be used by login managers to unlock a session before it is re-\r\nactivated during fast-user-switching.\r\n\r\n### Permissions\r\n\r\nThis method is restricted to privileged users by D-Bus policy.\r\n\r\nSee also: `Unlock signal`\r\n\r\n### GetIdleHint ()\r\n\r\n    GetIdleHint (out'b'idle_hint)\r\n\r\nGets the value of the `idle-hint` property.\r\n\r\n_`idle_hint`_:\r\n\r\n    The value of the idle-hint\r\n\r\nSee also: `idle-hint`\r\n\r\n### GetIdleSinceHint ()\r\n\r\n    GetIdleSinceHint (out's'iso8601_datetime)\r\n\r\nReturns an ISO 8601 date-time string that corresponds to the time of the last\r\nchange of the idle-hint.\r\n\r\n_`iso8601_datetime`_:\r\n\r\n    An ISO 8601 format date-type string\r\n\r\n### SetIdleHint ()\r\n\r\n    SetIdleHint (in'b'idle_hint)\r\n\r\nThis may be used by the session to indicate that it is idle.\r\n\r\nUse of this method is restricted to the user that owns the session.\r\n\r\n_`idle_hint`_:\r\n\r\n    boolean value to set the idle-hint to\r\n\r\n## Signal Details\r\n\r\n### The ActiveChanged signal\r\n\r\n    ActiveChanged ('b'is_active)\r\n\r\nEmitted when the active property has changed.\r\n\r\n_`is_active`_:\r\n\r\n    TRUE if the session is active, otherwise FALSE\r\n\r\n### The IdleHintChanged signal\r\n\r\n    IdleHintChanged ('b'hint)\r\n\r\nEmitted when the idle-hint property has changed.\r\n\r\n_`hint`_:\r\n\r\n    the new value of idle-hint\r\n\r\n### The Lock signal\r\n\r\n    Lock ()\r\n\r\nEmitted in response to a call to the `Lock()` method.\r\n\r\nIt is intended that the screensaver for the session should lock the screen in\r\nresponse to this signal.\r\n\r\n### The Unlock signal\r\n\r\n    Unlock ()\r\n\r\nEmitted in response to a call to the `Unlock()` method.\r\n\r\nIt is intended that the screensaver for the session should unlock the screen\r\nin response to this signal.\r\n\r\n## Property Details\r\n\r\n### The \"unix-user\" property\r\n\r\n    'unix-user'readwrite'u'\r\n    \r\n\r\nThe user assigned to the session.\r\n\r\n### The \"user\" property\r\n\r\n    'user'readwrite'u'\r\n    \r\n\r\nThe user assigned to the session.\r\n\r\n### Warning\r\n\r\n`user` is deprecated since version 0.1.3 and should not be used in newly-\r\nwritten code. Use `unix-user` instead.\r\n\r\n### The \"session-type\" property\r\n\r\n    'session-type'readwrite's'\r\n    \r\n\r\nThe type of the session.\r\n\r\nWarning: we haven't yet defined the allowed values for this property. It is\r\nprobably best to avoid this until we do.\r\n\r\n### The \"remote-host-name\" property\r\n\r\n    'remote-host-name'readwrite's'\r\n    \r\n\r\nThe remote host name for the session.\r\n\r\nThis will be set in situations where the session is opened and controlled from\r\na remote system.\r\n\r\nFor example, this value will be set when the session is created from an SSH or\r\nXDMCP connection.\r\n\r\n### The \"display-device\" property\r\n\r\n    'display-device'readwrite's'\r\n    \r\n\r\nThe display device (aka TTY) that the session is connected to.\r\n\r\n### The \"x11-display\" property\r\n\r\n    'x11-display'readwrite's'\r\n    \r\n\r\nValue of the X11 DISPLAY for this session if one is present.\r\n\r\n### The \"x11-display-device\" property\r\n\r\n    'x11-display-device'readwrite's'\r\n    \r\n\r\nThe display device (aka TTY) that the X11 display for the session is connected\r\nto. If there is no x11-display set then this value is undefined.\r\n\r\n### The \"active\" property\r\n\r\n    'active'readwrite'b'\r\n    \r\n\r\nWhether the session is active on the Seat that it is attached to.\r\n\r\nIf the session is not attached to a seat this value is undefined.\r\n\r\n### The \"is-local\" property\r\n\r\n    'is-local'readwrite'b'\r\n    \r\n\r\nWhether the session is local\r\n\r\nFIXME: we need to come up with a concrete definition for this value. It was\r\noriginally used as a way to identify XDMCP sessions that originate from a\r\nremote system.\r\n\r\n### The \"idle-hint\" property\r\n\r\n    'idle-hint'readwrite'b'\r\n    \r\n\r\nThis is a hint used to indicate that the session may be idle.\r\n\r\nFor sessions with a `x11-display` set (ie. graphical sessions), it is up to\r\neach session to delegate the responsibility for updating this value.\r\nTypically, the screensaver will set this.\r\n\r\nHowever, for non-graphical sessions with a `display-device` set the Session\r\nobject itself will periodically update this value based on the activity\r\ndetected on the display-device itself.\r\n\r\nThis idle-hint value should not be considered authoritative.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}